#############################################################
# Copyright 2019 FUJITSU LIMITED
# FileName: CLF-CICD-YZK-ALB-NginxECS-Template.yml
# FileType: YAML
# OverViews: CloudFormation Template for NginxECS CI/CD
# Version: 1.0
# Author: Fujitsu - hou
#############################################################
AWSTemplateFormatVersion: "2010-09-09"
Transform:
  Name: 'AWS::Include'
  Parameters:
    Location: !Sub '${MappingFilePATH}'



Parameters:
  #  ## user form  ##
  #  :param ProjectNumber: [Example:'01']
  #  :param ProjectNameUpper : [nginx]  
  #  :param Port: [Example:'443']
  #  :param SystemEnvironmentName: ['TKKDEV','TKKMNT','TKKSTG','IRKDEV','IRKMNT','IRKSTG','YZKDEV','YZKMNT','YZKSTG']
  #  :param ExecutionRoleName: ['IAMR-TKK-DEV-WEBTaskAction01','IAMR-TKK-STG-WEBTaskAction','IAMR-IRK-MNT-WEBTaskAction','IAMR-IRK-MNT-WEBTaskAction02','IAMR-IRK-STG-WEBTaskAction','IAMR-YZK-STG-WEBTaskAction','IAMR-YZK-STG-WEBTaskAction02']
  #  :param TaskRoleName:  ['IAMR-TKK-DEV-WEBContainerAction01','IAMR-TKK-STG-APContainerAction','IAMR-IRK-MNT-APContainerAction','IAMR-YZK-MNT-APContainerAction','IAMR-YZK-MNT-APContainerAction02','IAMR-IRK-STG-APContainerAction','IAMR-YZK-STG-APContainerAction','IAMR-YZK-STG-APContainerAction02']
  #  :param ClusterNumber: ['01','02']
  #  :param DesiredCount: EcsService Desired 
  #  :param MaxCapacity: ScalableTarget MAX   
  #  :param MinCapacity: ScalableTarget Min   
  #  :param TargetValue: ScalingPolicy 70
  #  :param BuildBucketName: ['tkk-build-source-bucket-dev1','irk-build-source-bucket-mnt','tkk-build-source-bucket-stg','build-source-bucket-dev','build-source-bucket-mnt','build-source-bucket-stg']
  #  :param BuildServiceRoleName: ['IAMR-TKK-DEV-WEBCodeBuild01','IAMR-TKK-STG-WEBCodeBuild','IAMR-IRK-MNT-WEBCodeBuild','IAMR-IRK-MNT-WEBCodeBuild02','IAMR-IRK-STG-WEBCodeBuild','IAMR-YZK-STG-WEBCodeBuild','IAMR-YZK-STG-WEBCodeBuild02']
  #  :param CodeBuildSecurityGroupId: ['sg-0d3c60bf08f23206d','sg-0e842b94094c8d0d7','sg-053189344799184b4','sg-0e1ac9d9d234066ed','sg-012bdcdf9f2279f2d','sg-061e256a9d483e944']
  #  :param DeployServiceRoleName: ['-','IAMR-TKK-DEV-WEBCodeDeploy01','IAMR-TKK-STG-WEBCodeDeploy','IAMR-IRK-MNT-WEBCodeDeploy','IAMR-IRK-MNT-WEBCodeDeploy02','IAMR-IRK-STG-WEBCodeDeploy','IAMR-YZK-STG-WEBCodeDeploy','IAMR-YZK-STG-WEBCodeDeploy02']
  #  :param PipelineServiceRoleName:  ['IAMR-TKK-DEV-WEBCodePipeline01','IAMR-TKK-STG-WEBCodePipeline','IAMR-IRK-MNT-WEBCodePipeline','IAMR-IRK-MNT-WEBCodePipeline02','IAMR-IRK-STG-WEBCodePipeline','IAMR-YZK-STG-WEBCodePipeline','IAMR-YZK-STG-WEBCodePipeline02']
  #  :param WebInstanceRoleName: ['IAMR-TKK-DEV-WEB','IAMR-TKK-STG-WEB','IAMR-IRK-MNT-WEB','IAMR-IRK-MNT-WEB02','IAMR-IRK-STG-WEB',IAMR-YZK-DEV-WEB','IAMR-YZK-STG-WEB','IAMR-YZK-STG-WEB02']
  #  :param CertificateArn:  ['-']
  #  :param LambdaBucketName:
  #  :param LambdaZipKey:
  #  :param LOGLEVEL:  


  MappingFilePATH:
    Type: String
    Default: 's3://s3-irk-mt2-cfn01/CICD/CLF-CICD-Mappings-WEBECS.yml'
  LargeType:
    Type: String
    Default: 'A'
  SmallType:
    Type: String
    Default: 'a'
  ProjectNameLower:
    Type: String
    Default: 'nginx'
  ProjectNameUpper:
    Type: String
    Default: 'NGINX'
  Port: 
    Type: Number
    Default: '443'
  SystemEnvironmentName: 
    Type: String
    Default: 'YZKMT2'
  ExecutionRoleName: 
    Type: String
    Default: 'IAMR-IRK-MT2-WEBTaskAction'
  TaskRoleName: 
    Type: String
    Default: 'IAMR-YZK-MT2-APContainerAction'
  ClusterNumber:
    Type: String 
    Default: '01'
    AllowedValues: ['01','01-B','02']
  DesiredCount:
    Type: Number
    Default: 0
  MaxCapacity:
    Type: Number
    Default: 0
  MinCapacity:
    Type: Number
    Default: 0
  TargetValue:
    Type: Number
    Default: 70
  BuildBucketName: 
    Type: String
    Default: "irk-build-source-bucket-mt2"
  BuildServiceRoleName: 
    Type: String
    Default: 'IAMR-IRK-MT2-WEBCodeBuild'
  DeployServiceRoleName:
    Type: String
    Default: 'IAMR-IRK-MT2-WEBCodeDeploy'
  CodeBuildSecurityGroupId:
    Type: String
    Default: "sg-02364de4058ec03f1"
  PipelineServiceRoleName: 
    Type: String
    Default: 'IAMR-IRK-MT2-WEBCodePipeline'
  ListenerARN: 
    Type: String
    Default: '-'
  CertificateArn: 
    Type: String
    Default: '-'
  ListenerRuleValues:
    Type: String
    Default: '/tkk-api-mt2-a/*'

Conditions:
  IsNotSSL: !Equals 
    - !Ref CertificateArn
    - '-'
  IsNotDev: !Not 
    - !Equals 
      - !FindInMap [ SystemEnvironmentMapping, !Ref SystemEnvironmentName,EnvironmentNameLower]
      - dev

  IsDev: !Equals 
    - !FindInMap [ SystemEnvironmentMapping, !Ref SystemEnvironmentName,EnvironmentNameLower]
    - dev

  CreateListener: !Equals
    - !Ref ListenerARN
    - "-"

Resources:  
  TargetGroup01:
   Type: AWS::ElasticLoadBalancingV2::TargetGroup
   Properties: 
    HealthCheckPath: '/healthcheck' 
    HealthCheckProtocol: HTTPS
    HealthCheckTimeoutSeconds: 5
    Matcher:
      HttpCode: '200'
      Name: !Sub 
      - 'ALB-${SystemNameUpper}-${EnvironmentNameUpper}-WEB01-${LargeType}-TG01' 
      - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
        EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
    Port: !Ref Port 
    Protocol: !If [ IsNotSSL, HTTP,HTTPS ] 
    TargetType: instance
    VpcId: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,VpcId]
    

  TargetGroup02:
   Type: AWS::ElasticLoadBalancingV2::TargetGroup
   Properties:
    HealthCheckPath: '/healthcheck'  
    HealthCheckProtocol: HTTPS 
    HealthCheckTimeoutSeconds: 5
    Matcher:
      HttpCode: '200'
    Name: !Sub 
      - 'ALB-${SystemNameUpper}-${EnvironmentNameUpper}-WEB01-${LargeType}-TG02' 
      - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
        EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
    Port: !Ref Port 
    Protocol: !If [ IsNotSSL,HTTP,HTTPS ] 
    TargetType: instance
    VpcId: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,VpcId]  

  Listener:
    Condition: CreateListener
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Port: !Ref Port   
      Protocol: !If  [ IsNotSSL,HTTP,HTTPS ] 
      Certificates: !If
        - IsNotSSL
        - !Ref "AWS::NoValue"
        - 
          - CertificateArn: !Ref CertificateArn
      DefaultActions: 
        - Type: fixed-response
          FixedResponseConfig: 
            ContentType: text/plain
            MessageBody: "Not Found"
            StatusCode: "404"
      LoadBalancerArn: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,ALBWSPRXY01Arn]

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref TargetGroup01
      Conditions:
        - Field: 'path-pattern'
          Values: 
            - !Ref ListenerRuleValues
      ListenerArn: !If [CreateListener,!Ref Listener,!Sub '${ListenerARN}']
      Priority: !If [CreateListener,1,2]

  Repository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub 
        - '${SystemNameLower}-${ProjectNameLower}-${SmallType}-${EnvironmentNameLower}' 
        - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]

      LifecyclePolicy: 
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep two images, expire all others",
                "selection": {
                    "tagStatus": "any",
                    "countType": "imageCountMoreThan",
                    "countNumber": 2
                },
                "action": {
                    "type": "expire"
                }
              }
            ]
          }
        
  Taskdefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub 
      - '${SystemNameLower}-${ProjectNameLower}-${SmallType}-task-${EnvironmentNameLower}' 
      - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
        EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
      ContainerDefinitions:
        - MemoryReservation: 300
          Image: !Sub 
            - '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${SystemNameLower}-${ProjectNameLower}-${SmallType}-${EnvironmentNameLower}:latest' 
            - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
              EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub 
                - 'Nginx-${LargeType}-${SystemNameUpper}-${EnvironmentNameUpper}' 
                - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
                  EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
              awslogs-region: !Sub '${AWS::Region}'
          Name: !Sub 
            - '${SystemNameLower}-${ProjectNameLower}-${SmallType}' 
            - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          PortMappings:
            - ContainerPort: !Ref Port 
              HostPort: 0
              Protocol: tcp
      ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ExecutionRoleName}'  
      NetworkMode: bridge
      TaskRoleArn: !Ref  TaskRoleName
      RequiresCompatibilities: 
        - 'EC2'

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        NamespaceId: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,NamespaceId]  
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Sub 
        - '${SystemNameLower}-${ProjectNameLower}-${SmallType}-service-${EnvironmentNameLower}' 
        - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]

  Service:
    Type: AWS::ECS::Service
    DependsOn:  ListenerRule
    Properties: 
      Cluster: !Sub 
        - 'ECS-IRK-${EnvironmentNameUpper}-WEB${ClusterNumber}' 
        - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
          EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
      DeploymentController: 
        Type: !If [ IsNotDev, CODE_DEPLOY, ECS ]  
      DesiredCount: !Ref DesiredCount 
      LaunchType: EC2
      LoadBalancers: 
        - ContainerName: !Sub 
          - '${SystemNameLower}-${ProjectNameLower}-${SmallType}' 
          - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          ContainerPort: !Ref Port 
          TargetGroupArn: !Ref TargetGroup01
      PlacementStrategies: 
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: instanceId
          Type: spread
      SchedulingStrategy: REPLICA
      ServiceRegistries: 
        - ContainerName: !Sub 
          - '${SystemNameLower}-${ProjectNameLower}-${SmallType}' 
          - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          ContainerPort: !Ref Port 
          RegistryArn: !GetAtt DiscoveryService.Arn
      ServiceName: !Sub 
        - '${SystemNameLower}-${ProjectNameLower}-${SmallType}-service-${EnvironmentNameLower}' 
        - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
      TaskDefinition: !Ref Taskdefinition


  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:     
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub 
        - 'service/ECS-IRK-${EnvironmentNameUpper}-WEB${ClusterNumber}/${SystemNameLower}-${ProjectNameLower}-${SmallType}-service-${EnvironmentNameLower}'  
        - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
          EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
          SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService' 
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: !Sub 
        - 'AS-${SystemNameUpper}-${EnvironmentNameUpper}-WEB${ClusterNumber}' 
        - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
          EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: !Ref TargetValue 
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization


  CodeBuild:
    Type: AWS::CodeBuild::Project
    DependsOn: Service
    Properties: 
      Name: !Sub 
        - '${SystemNameLower}-${ProjectNameLower}-${SmallType}-codebuild-project-${EnvironmentNameLower}' 
        - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
      Artifacts: 
        Type: NO_ARTIFACTS
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      ServiceRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${BuildServiceRoleName}' 
      Source:
        Type: S3
        Location: !Sub
          - '${BuildBucketName}/${SystemNameUpper}-${ProjectNameUpper}-${LargeType}.zip'  
          - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref CodeBuildSecurityGroupId
        Subnets: 
          - !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,Subnet1]
          - !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,Subnet2]        
        VpcId: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,VpcId]
      LogsConfig: 
          CloudWatchLogs: 
            Status: ENABLED
          S3Logs: 
            Status: DISABLED 

  CodeDeployApp:  
    Type: AWS::CodeDeploy::Application
    Condition: IsNotDev    
    Properties: 
      ApplicationName: !Sub 
        - 'AppECS-ECS-IRK-${EnvironmentNameUpper}-WEB${ClusterNumber}-${SystemNameLower}-${ProjectNameLower}-${SmallType}-service-${EnvironmentNameLower}' 
        - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
          EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
          SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
      ComputePlatform: ECS

  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Condition: IsNotDev    
    DependsOn: CodeBuild
    Properties: 
      DeploymentGroupName: !Sub 
        - 'DgpECS-ECS-IRK-${EnvironmentNameUpper}-WEB${ClusterNumber}-${SystemNameLower}-${ProjectNameLower}-${SmallType}-service-${EnvironmentNameLower}' 
        - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
          EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
          SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
      ApplicationName: !Ref CodeDeployApp
      AutoRollbackConfiguration: 
          Enabled: true
          Events: 
            - DEPLOYMENT_FAILURE   
      BlueGreenDeploymentConfiguration: 
        DeploymentReadyOption: 
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        TerminateBlueInstancesOnDeploymentSuccess: 
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
      DeploymentStyle: 
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      ECSServices: 
        - ClusterName: !Sub 
            - 'ECS-IRK-${EnvironmentNameUpper}-WEB${ClusterNumber}' 
            - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
              EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
          ServiceName: !GetAtt Service.Name 
      LoadBalancerInfo: 
          TargetGroupPairInfoList: 
            - ProdTrafficRoute: 
                  ListenerArns: 
                    - !If [CreateListener,!Ref Listener,!Sub '${ListenerARN}']
              TargetGroups: 
                - Name: !GetAtt TargetGroup01.TargetGroupName
                - Name: !GetAtt TargetGroup02.TargetGroupName
      ServiceRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${DeployServiceRoleName}'   

  Pipeline: 
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      Name: !Sub 
        - '${SystemNameLower}-${ProjectNameLower}-${SmallType}-pipeline-${EnvironmentNameLower}' 
        - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${PipelineServiceRoleName}'
      ArtifactStore: 
        Location: !Ref BuildBucketName
        Type: S3
      Stages: 
        - 
          Name: Source
          Actions: 
            -  
              Name: Source
              Namespace: !If [ IsNotDev, SourceVariables, !Ref "AWS::NoValue"]
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              OutputArtifacts: 
                - Name: SourceArtifact
              Configuration: 
                S3Bucket: !Ref BuildBucketName
                S3ObjectKey: !Sub 
                  - '${SystemNameUpper}-${ProjectNameUpper}-${LargeType}.zip' 
                  - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
                PollForSourceChanges: true
        - 
          Name: Build
          Actions: 
            -   
              Name: Build
              Namespace: BuildVariables
              ActionTypeId: 
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
              Configuration: 
                ProjectName: !Sub 
                - '${SystemNameLower}-${ProjectNameLower}-${SmallType}-codebuild-project-${EnvironmentNameLower}' 
                - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
                  EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]                
              InputArtifacts: 
                - Name: SourceArtifact
              OutputArtifacts: 
                - Name: BuildArtifact
              Region: !Sub '${AWS::Region}'
        -
          !If
            - IsNotDev
            -
              Name: Deploy
              Actions: 
                - 
                  Name: Deploy
                  Namespace: DeployVariables
                  ActionTypeId: 
                      Category: Deploy
                      Owner: AWS
                      Provider: CodeDeployToECS
                      Version: 1
                  Configuration: 
                    ApplicationName: !Ref CodeDeployApp
                    DeploymentGroupName: !Ref CodeDeployGroup
                    AppSpecTemplateArtifact: BuildArtifact
                    AppSpecTemplatePath: appspec.yml
                    TaskDefinitionTemplatePath: taskdef.json
                    TaskDefinitionTemplateArtifact: BuildArtifact
                    Image1ArtifactName: BuildArtifact
                    Image1ContainerName: IMAGE1_NAME
                  InputArtifacts: 
                    - Name: BuildArtifact
                  Region: !Sub '${AWS::Region}'
            - 
              Name: Deploy
              Actions: 
                - 
                  Name: Deploy
                  ActionTypeId: 
                      Category: Deploy
                      Owner: AWS
                      Provider: ECS 
                      Version: 1
                  Configuration: 
                    ClusterName: !Sub 
                      - 'ECS-${SystemNameUpper}-${EnvironmentNameUpper}-WEB${ClusterNumber}' 
                      - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper]
                        EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
                    ServiceName: !GetAtt Service.Name
                    FileName: imageDetail.json
                  InputArtifacts: 
                    - Name: BuildArtifact
                  Region: !Sub '${AWS::Region}'

#-----------------ServiceLogGroup---------------#
  LogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties: 
      KmsKeyId: !Sub 
        - 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}' 
        - KmsKeyId: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,KmsKeyId]
      LogGroupName: !Sub 
        - 'Nginx-${LargeType}-${SystemNameUpper}-${EnvironmentNameUpper}' 
        - SystemNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameUpper] 
          EnvironmentNameUpper: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameUpper]
      RetentionInDays: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,LogGroupRetentionInDays]

#-----------------CodeBuildLogGroup---------------#

  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties: 
      KmsKeyId: !Sub 
        - 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}' 
        - KmsKeyId: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,KmsKeyId]
      LogGroupName: !Sub 
        - '/aws/codebuild/${SystemNameLower}-${ProjectNameLower}-${SmallType}-codebuild-project-${EnvironmentNameLower}' 
        - SystemNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,SystemNameLower]
          EnvironmentNameLower: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,EnvironmentNameLower]
      RetentionInDays: !FindInMap [SystemEnvironmentMapping,!Ref SystemEnvironmentName,LogGroupRetentionInDays]

