#############################################################
# Copyright 2020 FUJITSU LIMITED
# FileName: CLF-XXX-XXX-WEBECS.yml
# FileType: YAML
# OverViews: CloudFormation Template for 3DB Web ECS
# Version: 1.0
# Author: konishi
#############################################################
AWSTemplateFormatVersion: '2010-09-09'
Parameters:

  Systemname:
    Type: String
    Description: Specify the system to deploy
    Default: 'IRK'
    AllowedValues: ['TKK','IRK','YZK']
  Environment:
    Type: String
    Description: Specify the environment to deploy
    Default: 'MT2'
    AllowedValues: ['DEV','STG','MT1','MT2','PRO']
  VpcId:
    Type: String
    Description: Select a VPC that allows instances access to the Internet
    Default: 'vpc-01313a6bdc4461f57'
  ClusterType:
    Type: String
    Description: ECS Cluster Type
    Default: 'WEB'
    AllowedValues: ['WEB','BAT']
  Number:
    Type: String
    Description: ECS Cluster Suffix Number
    Default: '01'
    AllowedValues: ['01','02','03','04','05']
  LargeType:
    Type: String
    Description: 'example:B'
    Default: 'B'
  KeyName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
    Default: key-or-mt1
  SubnetId:
    Type: CommaDelimitedList
    Description: Select at two subnets in your selected VPC
    Default: 'example:subnet-0b75092a08d98e07e,subnet-0e067b2202b00c4e5,subnet-054d26c35fa34d88e'
  SecurityGroup:
    Type: String
    Description: SecurityGroup id for the ECS instances
    Default: 'sg-0a4161de201423071'
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MinSize:
    Type: Number
    Default: '1'
    Description: Minimum number of instances that can be launched in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: r5.2xlarge
    ConstraintDescription: Please choose a valid instance type.
  AWSRegionToAMI:
    Description: EC2 instance AMI Image
    Type: String
    Default: 'example:ami-0068717a27def03c8'
  EbsVolumeSize:
    Type: Number
    Description: >
      Optional - Specifies the Size in GBs, of the newly created Amazon
      Elastic Block Store (Amazon EBS) volume
    Default: '100'
  EbsVolumeType:
    Type: String
    Description: Optional - Specifies the Type of (Amazon EBS) volume
    Default: 'gp2'
    AllowedValues:
      - ''
      - standard
      - io1
      - gp2
      - sc1
      - st1
    ConstraintDescription: Must be a valid EC2 volume type.
  DeviceName:
    Type: String
    Default: '/dev/xvda'
    Description: Optional - Specifies the device mapping for the Volume
  MinInstancesInService:
    Type: Number
    Default: '3'
    Description: Minimum number of instances that should be running during updating in your ECS cluster.

Resources:
  #  ##  ECS  ##
  #  :param : ECSCluster: ECS Cluster
  #  :param : ECSAutoScalingGroup: EC2 AutoScaling Group
  #  :param : ContainerInstances : EC2 AutoScaling LaunchConfiguration
  #  :param : EC2Role: WEB ECS IAMRole
  #  :param : AutoscalingRole
  #  :param : EC2InstanceProfile
  # 
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ECS-${Systemname}-${Environment}-${ClusterType}${Number}-${LargeType}
      Tags:
        -
          Key: AutoOperate
          Value: !Sub ${ClusterType}${Number}-${LargeType}-${Environment}
        -
          Key: BillingGroup
          Value: !Sub ${Systemname}-${Environment}-${LargeType}
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetId
      LaunchConfigurationName: !Ref ContainerInstances
      HealthCheckGracePeriod: 300 
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TerminationPolicies: 
        - NewestInstance
      Tags:
        -
          Key: Name
          Value: !Sub EC2-${Systemname}-${Environment}-${ClusterType}ECS${Number}-${LargeType}
          PropagateAtLaunch: 'true'
        -
          Key: AutoOperate
          Value: !Sub ${ClusterType}${Number}-${LargeType}-${Environment}
          PropagateAtLaunch: 'true'
        -
          Key: BillingGroup
          Value: !Sub ${Systemname}-${Environment}-${LargeType}
          PropagateAtLaunch: 'true'
    UpdatePolicy:
#      AutoScalingReplacingUpdate:
#        WillReplace: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref MinInstancesInService
        PauseTime: PT10M
        
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AWSRegionToAMI
      SecurityGroups: [!Ref SecurityGroup]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: !Ref DeviceName
        Ebs:
         VolumeSize: !Ref EbsVolumeSize
         VolumeType: !Ref EbsVolumeType
         
#USERDATA area#################################################################################################################################
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          hostnamectl set-hostname ecs-irk-mt2-web01-b

          yum install aws-cli -y
          yum install wget -y
          wget https://s3.ap-northeast-1.amazonaws.com/amazoncloudwatch-agent-ap-northeast-1/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
          sleep 15
          aws s3 cp s3://s3-irk-mt2-ecs-userdata-file01/web-b_amazon-cloudwatch-agent.json /tmp/amazon-cloudwatch-agent.json
          cp /tmp/amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2  -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
         
          mkdir -p /mnt/tkk/kokuho
          mkdir -p /mnt/yzk/receipt
          mkdir -p /mnt/irk/kokuho

          # mount -t efs -o tls,accesspoint=fsap-0aa57a943d6233ef9 fs-8801e0a8:/ /mnt/tkk/kokuho
          # mount -t efs -o tls,accesspoint=fsap-0948a6cd460a27a32 fs-8801e0a8:/ /mnt/yzk/receipt
          # mount -t efs -o tls,accesspoint=fsap-01827338878bc5b52 fs-8801e0a8:/ /mnt/irk/kokuho

          sleep 10

          sysctl -w net.core.somaxconn=65535
          sysctl -w net.ipv4.tcp_max_syn_backlog=65535
          sysctl -w net.core.netdev_max_backlog=65535
          sysctl -w net.ipv4.tcp_fin_timeout=30

          sleep 5

          echo ECS_CLUSTER=ECS-${Systemname}-${Environment}-${ClusterType}${Number}-${LargeType} >> /etc/ecs/ecs.config
          echo ECS_IMAGE_PULL_BEHAVIOR=always >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          
          ACTIVATIONURL='dsm://10.108.17.11:4120/'
          MANAGERURL='https://10.108.17.11:4119'
          CURLOPTIONS='--silent --tlsv1.2'
          linuxPlatform='';
          agentVersion='20.0.0.1681';
          isRPM='';
          curl $MANAGERURL/software/deploymentscript/platform/linuxdetectscriptv1/ -o /tmp/PlatformDetection $CURLOPTIONS --insecure
          . /tmp/PlatformDetection
          platform_detect
          echo Downloading agent package...
          package='agent.rpm'
          curl $MANAGERURL/software/agent/$linuxPlatform/$agentVersion -o /tmp/$package $CURLOPTIONS --insecure
          echo Installing agent package...
          rpm -ihv /tmp/agent.rpm
          sleep 15
          /opt/ds_agent/dsa_control -r
          /opt/ds_agent/dsa_control -a $ACTIVATIONURL "policyid:20"
          ################################################################################################################################################
          #EFS Failover setting
          #sudo useradd -G wheel efs-user01
          #echo "efs-user01 ALL=NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          #aws s3 cp s3://s3-irk-mnt-ecs-userdata-file01/EFS/EFSMountCheck.sh /home/efs-user01
          #aws s3 cp s3://s3-irk-mnt-ecs-userdata-file01/EFS/EFSMountChange.sh /home/efs-user01
          #aws s3 cp s3://s3-irk-mnt-ecs-userdata-file01/EFS/EFSMount_3db_MNT.env /home/efs-user01
          #aws s3 cp s3://s3-irk-mnt-ecs-userdata-file01/EFS/EFSLogLifecycle.sh /home/efs-user01
          #sudo mkdir -p /var/log/efs_mount_check/tkk/kokuho/
          #sudo mkdir -p /var/log/efs_mount_check/yzk/receipt/
          #sudo mkdir -p /var/log/efs_mount_check/irk/kokuho/
          #sudo chown efs-user01.efs-user01 /home/efs-user01/EFSMountCheck.sh
          #sudo chown efs-user01.efs-user01 /home/efs-user01/EFSMountChange.sh
          #sudo chown efs-user01.efs-user01 /home/efs-user01/EFSMount_3db_MNT.env
          #sudo chown efs-user01.efs-user01 /home/efs-user01/EFSLogLifecycle.sh
          #echo '*/1 * * * * efs-user01 sudo sh /home/efs-user01/EFSMountCheck.sh "/tkk/kokuho" | sudo tee -a /var/log/efs_mount_check/tkk/kokuho/$(date +\%y\%m\%d).log' | sudo tee -a /etc/crontab
          #sleep 5
          #echo '*/1 * * * * efs-user01 sudo sh /home/efs-user01/EFSMountCheck.sh "/yzk/receipt" | sudo tee -a /var/log/efs_mount_check/yzk/receipt/$(date +\%y\%m\%d).log' | sudo tee -a /etc/crontab
          #sleep 5
          #echo '*/1 * * * * efs-user01 sudo sh /home/efs-user01/EFSMountCheck.sh "/irk/kokuho" | sudo tee -a /var/log/efs_mount_check/irk/kokuho/$(date +\%y\%m\%d).log' | sudo tee -a /etc/crontab
          #echo '* * */1 * * efs-user01 sudo sh /home/efs-user01/EFSLogLifecycle.sh "/tkk/kokuho"' | sudo tee -a /etc/crontab
          #echo '* * */1 * * efs-user01 sudo sh /home/efs-user01/EFSLogLifecycle.sh "/yzk/receipt"' | sudo tee -a /etc/crontab
          #echo '* * */1 * * efs-user01 sudo sh /home/efs-user01/EFSLogLifecycle.sh "/irk/kokuho"' | sudo tee -a /etc/crontab
          ################################################################################################################################################


################################################################################################################################################
#ECSInstanceScalingPolicy
  ECSInstanceScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AutoScalingGroupName: !Ref ECSAutoScalingGroup 
      EstimatedInstanceWarmup: 300
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: #TargetTrackingScaling
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 90  

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub IAMR-${Systemname}-${Environment}-${ClusterType}-${LargeType}
      Description: Allows EC2 instances to call AWS services on your behalf.
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudHSMReadOnlyAccess
  EC2RolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'   
    Properties:
      ManagedPolicyName: !Sub 'IAMP-${Systemname}-ECS-${LargeType}'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - ec2:DescribeVolumes
              - ec2:DescribeTags
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:UpdateContainerInstancesState
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: '*'
      Roles: 
        - !Ref EC2Role

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub IAMP-${Systemname}-${Environment}-${LargeType}-service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'

  ASGTerminateHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      DefaultResult: "ABANDON"
      HeartbeatTimeout: "900"
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      NotificationMetadata:  !Sub ECS-${Systemname}-${Environment}-${ClusterType}${Number}-${LargeType}
      NotificationTargetARN: !Sub arn:aws:sns:ap-northeast-1:457550092927:SNS-IRK-MT2-ASGLifeCycleHook01
      RoleARN: !Sub arn:aws:iam::457550092927:role/IAMR-${Systemname}-${Environment}-ASGLifeCycleHook
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
