Parameters:
 ProjectName:
   Type: String
   Default: postvnext-asia-poc-
 TaskCpu:
   Type: Number
   Default: 256
 TaskMemory:
   Type: Number
   Default: 512
 DesiredCount:
   Type: Number
   Default: 1
 Repository:
   Type: String
   Default: postvnext-asia-poc-proxy-dev-repo

# Scaling params
 TaskMinContainerCount:
   Type: Number
   Description: Minimum number of containers to run for the service
   Default: 1
   MinValue: 1
   ConstraintDescription: Value must be at least one

 TaskMaxContainerCount:
   Type: Number
   Description: Maximum number of containers to run for the service when auto scaling out
   Default: 2
   MinValue: 1
   ConstraintDescription: Value must be at least one

 TargetValue:
   Type: Number
   Default: 75.0


Resources:
 # -------------------------------------
 # Cluster??
 # -------------------------------------

 Cluster:
   Type: AWS::ECS::Cluster
   Properties:
     ClusterName: !Sub ${ProjectName}proxy-dev-nginx-ecs-cluster
     ClusterSettings:
      - Name: containerInsights
        Value: enabled
     Tags:
      - Key: Name
        Value: !Sub ${ProjectName}proxy-dev-nginx-ecs-cluster      
 LogGroup:
   Type: AWS::Logs::LogGroup
   Properties:
     LogGroupName: !Sub /ecs/${ProjectName}proxy-dev-ecs-log-group
# -------------------------------------
 # LB??
 # -------------------------------------
 LoadBalancer:
   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
   Properties:
     Name: !Sub ${ProjectName}proxy-dev-nlb
     Scheme: internal
     Subnets: 
       - subnet-028cc198b464cb4e4
       - subnet-049a2c43e6ed241dd
     Type: network

 HttpListnener:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref TargetGroup
     LoadBalancerArn: !Ref LoadBalancer
     Port: 443
     Protocol: TCP

 TargetGroup:
   Type: AWS::ElasticLoadBalancingV2::TargetGroup
   Properties:
     Name: postvnext-proxy-dev-targetgroup
     Port: 443
     Protocol: TCP
     UnhealthyThresholdCount: 3
     TargetType: ip
     VpcId: vpc-09190f4860fec73b6
     TargetGroupAttributes: 
       - Key: "preserve_client_ip.enabled"
         Value: true
 # -------------------------------------
 # Fargate?p?@SG??
 # -------------------------------------
 FargateSecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
     Tags:
       - Key: Name
         Value: !Sub ${ProjectName}proxy-dev-fargate-sg
     GroupName: !Sub ${ProjectName}proxy-dev-fargate-sg
     GroupDescription: Security group for the service
     VpcId: vpc-09190f4860fec73b6
     SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 218.44.52.224/28
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 208.127.118.0/23
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 208.127.120.0/23
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 210.162.30.96/28
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.0.0.0/16	
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.1.0.0/16
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 3.113.220.94/32
##443 below
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 218.44.52.224/28
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 208.127.118.0/23
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 208.127.120.0/23
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 210.162.30.96/28
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.1.0.0/16
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 3.113.220.94/32


 # -------------------------------------
 # Fargate ?^?X?N??`
 # -------------------------------------
 TaskDefinition:
   Type: AWS::ECS::TaskDefinition
   Properties:
     Family: !Sub ${ProjectName}proxy-dev-ecs-task-definition
     RequiresCompatibilities:
       - FARGATE
     Cpu: !Ref TaskCpu
     Memory: !Ref TaskMemory
     NetworkMode: awsvpc
     ExecutionRoleArn: arn:aws:iam::321103485566:role/postvnext-asia-poc-proxy-ECS-Task-IAMR
     TaskRoleArn: arn:aws:iam::321103485566:role/postvnext-asia-poc-proxy-ECS-Task-IAMR
     ContainerDefinitions:
       - Name: !Sub ${ProjectName}proxy-dev-ecs-container
         Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
         PortMappings:
           - ContainerPort: 443
             HostPort: 443
             Protocol: tcp
         Environment:
           - Name: TZ
             Value: Asia/Tokyo
         LogConfiguration:
           LogDriver: awslogs
           Options:
             awslogs-region: !Ref 'AWS::Region'
             awslogs-group: !Ref LogGroup
             awslogs-stream-prefix: app

 # -------------------------------------
 # Services ?^?X?N??`
 # -------------------------------------
 Service:
   Type: AWS::ECS::Service
   Properties:
     Cluster: !Ref Cluster
     DesiredCount: !Ref DesiredCount
     LaunchType: FARGATE
     LoadBalancers:
       - ContainerName: !Sub ${ProjectName}proxy-dev-ecs-container
         ContainerPort: 443
         TargetGroupArn: !Ref TargetGroup
     NetworkConfiguration:
       AwsvpcConfiguration:
         AssignPublicIp: DISABLED  # PublicSubnet??p???????ENABLED?????K?v?????????B
         SecurityGroups:
           - !Ref FargateSecurityGroup
         Subnets: 
           - subnet-057e3d284349d8e73
           - subnet-0861a730499116155

     ServiceName: !Sub ${ProjectName}proxy-dev-ecs-service-name
     TaskDefinition: !Ref TaskDefinition
   DependsOn:
     - TargetGroup
     - HttpListnener
     - FargateSecurityGroup

 # -------------------------------------
 # Auto Scaling??`
 # -------------------------------------
 ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref TaskMinContainerCount
      MaxCapacity: !Ref TaskMaxContainerCount
      ResourceId: !Sub
        - service/${EcsClusterName}/${EcsDefaultServiceName}
        - EcsClusterName: !Ref Cluster
          EcsDefaultServiceName: !Sub ${ProjectName}proxy-dev-ecs-service-name
      RoleARN: arn:aws:iam::321103485566:role/postvnext-asia-poc-proxy-ECS-AutoScale-IAMR
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
     - Service

 TargetTrackingScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ProjectName}proxy-dev-nginx-ecs-scalingpolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref TargetValue
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
    DependsOn:
      - ServiceScalingTarget